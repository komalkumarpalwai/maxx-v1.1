{"version":3,"file":"static/js/387.e2f2dba9.chunk.js","mappings":"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","sources":["components/ManageTestsTable.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\n// Single clean ViewQuestionsModal component (above ManageTestsTable)\r\nfunction ViewQuestionsModal({ questions, testId, testTitle, onClose, fetchQuestions }) {\r\n  const [editIdx, setEditIdx] = useState(null);\r\n  const [editQ, setEditQ] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n  const [msg, setMsg] = useState('');\r\n\r\n  const startEdit = (q, idx) => {\r\n    setEditIdx(idx);\r\n    setEditQ({\r\n      question: q.question,\r\n      option1: q.options ? q.options[0] : q.option1,\r\n      option2: q.options ? q.options[1] : q.option2,\r\n      option3: q.options ? q.options[2] : q.option3,\r\n      option4: q.options ? q.options[3] : q.option4,\r\n      correctAnswer: (q.correctAnswer !== undefined && q.correctAnswer !== null) ? (Number(q.correctAnswer) + 1).toString() : '',\r\n      points: q.points || 1\r\n    });\r\n    setMsg('');\r\n  };\r\n  const cancelEdit = () => { setEditIdx(null); setEditQ({}); setMsg(''); };\r\n  const handleEditChange = (field, value) => setEditQ(q => ({ ...q, [field]: value }));\r\n  const saveEdit = async (idx) => {\r\n    setMsg('This feature will be released in version 2 of Maxx Solutions.');\r\n    setSaving(false);\r\n  };\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white p-6 rounded-lg w-full max-w-2xl max-h-[90vh] flex flex-col overflow-y-auto border border-gray-200\">\r\n        <h3 className=\"font-semibold text-lg mb-4\">Questions for: <span className=\"text-blue-700\">{testTitle}</span></h3>\r\n        {questions.length === 0 ? (\r\n          <div className=\"text-gray-500\">No questions found for this test. Please ensure that the duration is set correctly.</div>\r\n        ) : (\r\n          <ol className=\"list-decimal ml-5 space-y-3\">\r\n            {questions.map((q, idx) => (\r\n              <li key={idx} className=\"mb-2\">\r\n                {editIdx === idx ? (\r\n                  <div className=\"border rounded p-2 bg-gray-50\">\r\n                    <input className=\"input w-full mb-1\" value={editQ.question} onChange={e => handleEditChange('question', e.target.value)} />\r\n                    <div className=\"flex gap-2 mb-1\">\r\n                      <input className=\"input flex-1\" placeholder=\"Option 1\" value={editQ.option1} onChange={e => handleEditChange('option1', e.target.value)} />\r\n                      <input className=\"input flex-1\" placeholder=\"Option 2\" value={editQ.option2} onChange={e => handleEditChange('option2', e.target.value)} />\r\n                      <input className=\"input flex-1\" placeholder=\"Option 3\" value={editQ.option3} onChange={e => handleEditChange('option3', e.target.value)} />\r\n                      <input className=\"input flex-1\" placeholder=\"Option 4\" value={editQ.option4} onChange={e => handleEditChange('option4', e.target.value)} />\r\n                    </div>\r\n                    <div className=\"flex gap-2 mb-1\">\r\n                      <select className=\"input w-32\" value={editQ.correctAnswer} onChange={e => handleEditChange('correctAnswer', e.target.value)}>\r\n                        <option value=\"\">Correct Answer</option>\r\n                        <option value=\"1\">Option 1</option>\r\n                        <option value=\"2\">Option 2</option>\r\n                        <option value=\"3\">Option 3</option>\r\n                        <option value=\"4\">Option 4</option>\r\n                      </select>\r\n                      <input className=\"input w-20\" type=\"number\" min=\"1\" value={editQ.points} onChange={e => handleEditChange('points', e.target.value)} placeholder=\"Points\" />\r\n                    </div>\r\n                    <div className=\"flex gap-2 mt-2\">\r\n                      <button className=\"px-3 py-1 bg-blue-600 text-white rounded\" onClick={() => saveEdit(idx)} disabled={saving}>Save</button>\r\n                      <button className=\"px-3 py-1 bg-gray-400 text-white rounded\" onClick={cancelEdit} disabled={saving}>Cancel</button>\r\n                    </div>\r\n                    {msg && <div className=\"text-xs text-red-600 mt-1\">{msg}</div>}\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"font-medium\">Q{idx + 1}: {q.question}</div>\r\n                    <ul className=\"ml-4 text-sm\">\r\n                      <li>A. {q.options ? q.options[0] : q.option1}</li>\r\n                      <li>B. {q.options ? q.options[1] : q.option2}</li>\r\n                      <li>C. {q.options ? q.options[2] : q.option3}</li>\r\n                      <li>D. {q.options ? q.options[3] : q.option4}</li>\r\n                    </ul>\r\n                    <div className=\"text-xs text-gray-500 mt-1\">Correct: Option {(q.correctAnswer !== undefined && q.correctAnswer !== null) ? (Number(q.correctAnswer) + 1) : ''} | Points: {q.points}</div>\r\n                    <button className=\"mt-1 px-2 py-1 bg-yellow-500 text-white rounded text-xs\" onClick={() => startEdit(q, idx)}>Edit</button>\r\n                  </>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        )}\r\n        <button className=\"mt-6 px-4 py-2 bg-gray-400 text-white rounded self-end\" onClick={onClose}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AddQuestionsModal({ closeQModal, handleAddQuestions, loading }) {\r\n  const [showCSV, setShowCSV] = useState(false);\r\n  const [csvError, setCsvError] = useState('');\r\n  const [csvQuestions, setCsvQuestions] = useState([]);\r\n  const [csvLoading, setCsvLoading] = useState(false);\r\n  const [manualQuestions, setManualQuestions] = useState([\r\n    { question: '', option1: '', option2: '', option3: '', option4: '', correctAnswer: '', points: '' }\r\n  ]);\r\n  const [currentIdx, setCurrentIdx] = useState(0);\r\n  const [manualError, setManualError] = useState('');\r\n  // Parse CSV string to array of question objects\r\n  function parseCSV(csvText) {\r\n    const lines = csvText.trim().split(/\\r?\\n/);\r\n    if (lines.length < 2) return [];\r\n    const header = lines[0].split(',').map(h => h.trim());\r\n    return lines.slice(1).map(line => {\r\n      const values = line.split(',');\r\n      const obj = {};\r\n      header.forEach((h, i) => {\r\n        obj[h] = values[i] ? values[i].trim() : '';\r\n      });\r\n      return obj;\r\n    });\r\n  }\r\n\r\n  const handleCSVUpload = async (e) => {\r\n    setCsvError('');\r\n    setCsvQuestions([]);\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    if (!file.name.endsWith('.csv')) {\r\n      setCsvError('Please upload a .csv file.');\r\n      return;\r\n    }\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      try {\r\n        const text = event.target.result;\r\n        const questions = parseCSV(text);\r\n        if (!questions.length) {\r\n          setCsvError('No valid questions found in CSV.');\r\n        } else {\r\n          setCsvQuestions(questions);\r\n        }\r\n      } catch (err) {\r\n        setCsvError('Failed to parse CSV.');\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  const handleSaveCSVQuestions = async () => {\r\n    setCsvError('');\r\n    setCsvLoading(true);\r\n    // Validate questions\r\n    const validQuestions = csvQuestions.filter(q => q.question && q.option1 && q.option2 && q.option3 && q.option4 && q.correctAnswer && q.points);\r\n    if (!validQuestions.length) {\r\n      setCsvError('No valid questions to save.');\r\n      setCsvLoading(false);\r\n      return;\r\n    }\r\n    try {\r\n      await handleAddQuestions(validQuestions);\r\n      setShowCSV(false);\r\n      setCsvQuestions([]);\r\n      closeQModal();\r\n    } catch (err) {\r\n      setCsvError('Failed to save questions.');\r\n    } finally {\r\n      setCsvLoading(false);\r\n    }\r\n  };\r\n  const handleManualChange = (field, value) => {\r\n    setManualQuestions(qs => qs.map((q, i) => i === currentIdx ? { ...q, [field]: value } : q));\r\n  };\r\n  const goNext = () => {\r\n    if (currentIdx === manualQuestions.length - 1) {\r\n      setManualQuestions(qs => [...qs, { question: '', option1: '', option2: '', option3: '', option4: '', correctAnswer: '', points: '' }]);\r\n    }\r\n    setCurrentIdx(idx => idx + 1);\r\n  };\r\n  const goPrev = () => {\r\n    if (currentIdx > 0) setCurrentIdx(idx => idx - 1);\r\n  };\r\n  const removeCurrent = () => {\r\n    if (manualQuestions.length === 1) return;\r\n    setManualQuestions(qs => {\r\n      const arr = qs.filter((_, i) => i !== currentIdx);\r\n      return arr;\r\n    });\r\n    setCurrentIdx(idx => (idx > 0 ? idx - 1 : 0));\r\n  };\r\n  const saveManualQuestions = async () => {\r\n    setManualError('');\r\n    const validQuestions = manualQuestions.filter(q => q.question.trim());\r\n    if (validQuestions.length === 0) {\r\n      setManualError('Please add at least one question.');\r\n      return;\r\n    }\r\n    // Validate all fields for each question\r\n    for (let i = 0; i < validQuestions.length; i++) {\r\n      const q = validQuestions[i];\r\n      if (!q.option1 || !q.option2 || !q.option3 || !q.option4) {\r\n        setManualError(`All options are required for question ${i + 1}`);\r\n        return;\r\n      }\r\n      if (!q.correctAnswer) {\r\n        setManualError(`Correct answer is required for question ${i + 1}`);\r\n        return;\r\n      }\r\n    }\r\n    await handleAddQuestions(validQuestions);\r\n    closeQModal();\r\n  };\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white p-6 rounded-lg w-full max-w-md border border-gray-200 shadow-xl flex flex-col\" style={{ minWidth: 350 }}>\r\n        <h2 className=\"font-semibold text-xl mb-3 text-gray-800\">Add Questions</h2>\r\n        <div className=\"flex gap-2 mb-4\">\r\n          <button className=\"px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setShowCSV(true)}>Bulk Upload (CSV)</button>\r\n          <button className=\"px-3 py-1 bg-gray-300 text-gray-600 rounded cursor-not-allowed\" disabled>Generate with AI (Coming Soon)</button>\r\n        </div>\r\n        {showCSV && (\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white p-4 rounded-lg w-full max-w-md border border-gray-200\">\r\n              <h4 className=\"font-semibold mb-2 text-gray-700\">CSV Format</h4>\r\n              <p className=\"text-xs mb-2\">Columns: <b>question, option1, option2, option3, option4, correctAnswer (1-4), points</b></p>\r\n              <div className=\"bg-gray-100 p-2 rounded text-xs mb-2\">\r\n                question,option1,option2,option3,option4,correctAnswer,points<br />\r\n                What is 2+2?,2,3,4,5,3,1<br />\r\n                Capital of France?,London,Berlin,Paris,Rome,3,1\r\n              </div>\r\n              <input type=\"file\" accept=\".csv\" onChange={handleCSVUpload} className=\"mb-2\" />\r\n              {csvQuestions.length > 0 && (\r\n                <div className=\"mb-2 text-xs text-green-700\">{csvQuestions.length} questions ready to save.</div>\r\n              )}\r\n              {csvError && <div className=\"text-red-600 text-xs mb-2\">{csvError}</div>}\r\n              <div className=\"flex gap-2 mt-2\">\r\n                <button className=\"px-3 py-1 bg-blue-500 text-white rounded\" onClick={handleSaveCSVQuestions} disabled={csvLoading || !csvQuestions.length}>{csvLoading ? 'Saving...' : 'Save'}</button>\r\n                <button className=\"px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setShowCSV(false)} disabled={csvLoading}>Close</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"mb-4\">\r\n          <h3 className=\"font-semibold text-base mb-2 text-gray-700\">Create Questions Manually</h3>\r\n          <div className=\"border border-gray-200 rounded p-3 bg-white flex flex-col gap-2\">\r\n            <div className=\"flex flex-wrap gap-2 items-center mb-2\">\r\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Question\" value={manualQuestions[currentIdx].question} onChange={e => handleManualChange('question', e.target.value)} />\r\n              <input className=\"input w-20 border-gray-300 text-sm\" placeholder=\"Points\" type=\"number\" value={manualQuestions[currentIdx].points} onChange={e => handleManualChange('points', e.target.value)} />\r\n              <button className=\"px-2 py-1 bg-red-100 text-red-600 rounded text-xs\" onClick={removeCurrent} disabled={manualQuestions.length === 1}>Remove</button>\r\n            </div>\r\n            <div className=\"flex flex-wrap gap-2 items-center\">\r\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 1\" value={manualQuestions[currentIdx].option1} onChange={e => handleManualChange('option1', e.target.value)} />\r\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 2\" value={manualQuestions[currentIdx].option2} onChange={e => handleManualChange('option2', e.target.value)} />\r\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 3\" value={manualQuestions[currentIdx].option3} onChange={e => handleManualChange('option3', e.target.value)} />\r\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 4\" value={manualQuestions[currentIdx].option4} onChange={e => handleManualChange('option4', e.target.value)} />\r\n              <select className=\"input w-28 border-gray-300 text-sm\" value={manualQuestions[currentIdx].correctAnswer} onChange={e => handleManualChange('correctAnswer', e.target.value)}>\r\n                <option value=\"\">Correct</option>\r\n                <option value=\"1\">Option 1</option>\r\n                <option value=\"2\">Option 2</option>\r\n                <option value=\"3\">Option 3</option>\r\n                <option value=\"4\">Option 4</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"flex justify-between mt-2\">\r\n              <button className=\"px-3 py-1 bg-gray-200 text-gray-800 rounded text-sm\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\r\n              <span className=\"text-xs text-gray-500\">Question {currentIdx + 1} of {manualQuestions.length}</span>\r\n              <button className=\"px-3 py-1 bg-gray-200 text-gray-800 rounded text-sm\" onClick={goNext}>Next</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-2\">\r\n            <h4 className=\"font-semibold text-xs mb-1 text-gray-600\">Summary</h4>\r\n            <ul className=\"text-xs text-gray-700 list-decimal ml-5\">\r\n              {manualQuestions.filter(q => q.question.trim()).map((q, i) => (\r\n                <li key={i} className={i === currentIdx ? 'font-bold text-blue-600' : ''}>{q.question.slice(0, 40) || 'Untitled'}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {manualError && <div className=\"text-red-600 text-xs mt-2\">{manualError}</div>}\r\n        </div>\r\n        <div className=\"flex gap-2 justify-end mt-4\">\r\n          <button className=\"px-4 py-2 bg-blue-500 text-white rounded\" onClick={saveManualQuestions} disabled={loading}>Save</button>\r\n          <button className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded\" onClick={closeQModal}>Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction ManageTestsTable() {\r\n  const [viewQModal, setViewQModal] = useState({ open: false, questions: [], testTitle: '' });\r\n  // Bulk selection state\r\n  const [selectedTests, setSelectedTests] = useState([]);\r\n  // ...existing code...\r\n\r\n  // ...existing code...\r\n  const [tests, setTests] = useState([]);\r\n  const allSelected = tests.length > 0 && selectedTests.length === tests.length;\r\n  const handleSelectTest = (testId) => {\r\n    setSelectedTests((prev) =>\r\n      prev.includes(testId) ? prev.filter((id) => id !== testId) : [...prev, testId]\r\n    );\r\n  };\r\n  const handleSelectAll = () => {\r\n    if (allSelected) setSelectedTests([]);\r\n    else setSelectedTests(tests.map((t) => t._id));\r\n  };\r\n\r\n  // Bulk delete\r\n  const handleBulkDelete = async () => {\r\n    if (selectedTests.length === 0) return;\r\n    if (!window.confirm(`Are you sure you want to delete ${selectedTests.length} selected test(s)? This action cannot be undone.`)) return;\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      for (const id of selectedTests) {\r\n        await api.delete(`/tests/${id}`);\r\n      }\r\n      setSuccess('Selected tests deleted!');\r\n      setSelectedTests([]);\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Bulk delete failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Bulk start (activate)\r\n  const handleBulkStart = () => {\r\n    if (selectedTests.length === 0) return;\r\n    if (!window.confirm(`Are you sure you want to start ${selectedTests.length} selected test(s)?`)) return;\r\n    // Open window modal for all selected tests (one by one)\r\n    setBulkStartQueue([...selectedTests]);\r\n    setBulkStartModal({ open: true, testId: selectedTests[0], idx: 0, start: '', end: '', duration: '' });\r\n  };\r\n  // Bulk start modal state\r\n  const [bulkStartModal, setBulkStartModal] = useState({ open: false, testId: null, idx: 0, start: '', end: '', duration: '' });\r\n  const [bulkStartQueue, setBulkStartQueue] = useState([]);\r\n  const handleBulkStartNext = async () => {\r\n    const { testId, start, end, duration, idx } = bulkStartModal;\r\n    setLoading(true); setError('');\r\n    try {\r\n      const mins = parseInt(duration, 10);\r\n      if (!start || !end || isNaN(mins) || mins < 1) {\r\n        setError('Please fill all fields for this test.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      await api.put(`/tests/${testId}/activate`, { startDate: start, endDate: end, duration: mins });\r\n      // Move to next\r\n      if (idx + 1 < bulkStartQueue.length) {\r\n        setBulkStartModal({ open: true, testId: bulkStartQueue[idx + 1], idx: idx + 1, start: '', end: '', duration: '' });\r\n      } else {\r\n        setBulkStartModal({ open: false, testId: null, idx: 0, start: '', end: '', duration: '' });\r\n        setBulkStartQueue([]);\r\n        setSuccess('Selected tests started!');\r\n        setSelectedTests([]);\r\n        fetchTests();\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to start test');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleBulkStartCancel = () => {\r\n    setBulkStartModal({ open: false, testId: null, idx: 0, start: '', end: '', duration: '' });\r\n    setBulkStartQueue([]);\r\n  };\r\n\r\n  const openViewQModal = async (test) => {\r\n    setLoading(true); setError('');\r\n    try {\r\n      const res = await api.get(`/tests/${test._id}/admin-questions`);\r\n      setViewQModal({ open: true, questions: res.data.questions || [], testTitle: test.title });\r\n    } catch (err) {\r\n      setError('Failed to fetch questions');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const closeViewQModal = () => setViewQModal({ open: false, questions: [], testTitle: '' });\r\n  // ...existing code...\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [showQModal, setShowQModal] = useState(false);\r\n  const [currentTestId, setCurrentTestId] = useState(null);\r\n  const [branchOptions, setBranchOptions] = useState([]);\r\n  const [yearOptions, setYearOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch allowed branches/years from backend\r\n    const fetchRegistrationOptions = async () => {\r\n      try {\r\n        const res = await api.get('/meta/registration-options');\r\n        setBranchOptions(res.data.branches || []);\r\n        setYearOptions(res.data.years || []);\r\n      } catch (err) {\r\n        setBranchOptions([]);\r\n        setYearOptions([]);\r\n      }\r\n    };\r\n    fetchRegistrationOptions();\r\n  }, []);\r\n  const [editModal, setEditModal] = useState({ open: false, test: null, form: {} });\r\n  const [windowModal, setWindowModal] = useState({ open: false, testId: null, start: '', end: '', duration: '' });\r\n\r\n  // No need to fetch branches/years from users; use enums above\r\n\r\n  const fetchTests = async () => {\r\n    setLoading(true); setError('');\r\n    try {\r\n      // Fetch all tests for admin (not just active ones)\r\n      const res = await api.get('/tests?all=1');\r\n      setTests(res.data.tests || []);\r\n    } catch (err) {\r\n      setError('Failed to fetch tests');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => { fetchTests(); }, []);\r\n\r\n  const openQModal = (testId) => { setCurrentTestId(testId); setShowQModal(true); };\r\n  const closeQModal = () => { setShowQModal(false); setCurrentTestId(null); };\r\n\r\n  const openEditModal = (test) => {\r\n    setEditModal({\r\n      open: true,\r\n      test,\r\n      form: {\r\n        requireAllQuestions: test.requireAllQuestions ?? true,\r\n        allowNavigation: test.allowNavigation ?? true,\r\n        deviceRestriction: test.deviceRestriction || 'both',\r\n        allowedBranches: test.allowedBranches || [],\r\n        allowedYears: test.allowedYears || [],\r\n        tabSwitchLimit: test.tabSwitchLimit ?? 3\r\n      }\r\n    });\r\n  };\r\n  const closeEditModal = () => setEditModal({ open: false, test: null, form: {} });\r\n  const handleEditChange = (field, value) => {\r\n    setEditModal((prev) => ({ ...prev, form: { ...prev.form, [field]: value } }));\r\n  };\r\n  const handleEditSave = async () => {\r\n    setLoading(true); setError(''); setSuccess('');\r\n    if (!editModal.form.tabSwitchLimit || editModal.form.tabSwitchLimit < 1) {\r\n      setError('Tab Switch Limit must be at least 1'); setLoading(false); return;\r\n    }\r\n    if (!editModal.form.allowedBranches || editModal.form.allowedBranches.length === 0) {\r\n      setError('Select at least one allowed branch'); setLoading(false); return;\r\n    }\r\n    if (!editModal.form.allowedYears || editModal.form.allowedYears.length === 0) {\r\n      setError('Select at least one allowed year'); setLoading(false); return;\r\n    }\r\n    try {\r\n      await api.put(`/tests/${editModal.test._id}`, editModal.form);\r\n      setSuccess('Test settings updated!');\r\n      closeEditModal();\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to update test settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const doActivate = async (testId, start, end, duration) => {\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      const mins = parseInt(duration, 10);\r\n      if (!start || !end) {\r\n        setError('Please select both start and end date/time');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      if (isNaN(mins) || mins < 1) {\r\n        setError('Please enter a valid duration (minutes)');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      await api.put(`/tests/${testId}/activate`, { startDate: start, endDate: end, duration: mins });\r\n      setSuccess('Test activated!');\r\n      setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' });\r\n      fetchTests();\r\n    } catch (err) {\r\n      // Show backend validation error if present\r\n      const backendMsg = err.response?.data?.message;\r\n      setError(backendMsg || 'Failed to activate test');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleActivate = (testId) => {\r\n    setWindowModal({ open: true, testId, start: '', end: '', duration: '' });\r\n  };\r\n  const handleDeactivate = async (id) => {\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      await api.put(`/tests/${id}/deactivate`);\r\n      setSuccess('Test deactivated!');\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Failed to deactivate test');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleDeleteTest = async (id) => {\r\n    if (!window.confirm('Are you sure you want to delete this test? This action cannot be undone.')) return;\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      await api.delete(`/tests/${id}`);\r\n      setSuccess('Test deleted successfully!');\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Failed to delete test');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddQuestions = async (questions) => {\r\n    if (!currentTestId || !questions || questions.length === 0) return;\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      await api.put(`/tests/${currentTestId}/questions`, { questions });\r\n      setSuccess('Questions added!');\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Failed to add questions');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\nconst [showGuide, setShowGuide] = useState(true);\r\n  return (\r\n\r\n    \r\n    <div>\r\n     \r\n\r\n      <h3 className=\"font-semibold mb-2\">All Tests</h3>\r\n      {loading && (\r\n        <div className=\"flex items-center justify-center py-8\" role=\"status\" aria-live=\"polite\">\r\n          <svg className=\"animate-spin h-8 w-8 text-blue-600 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\r\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8v8z\" />\r\n          </svg>\r\n          <span>Loading tests...</span>\r\n        </div>\r\n      )}\r\n      {error && <div className=\"text-red-600\">{error}</div>}\r\n      {success && <div className=\"text-green-600\">{success}</div>}\r\n\r\n\r\n      {/* Bulk Actions Bar */}\r\n      <div className=\"flex gap-2 mb-2\">\r\n        <button className=\"px-3 py-1 bg-red-600 text-white rounded disabled:opacity-50\" onClick={handleBulkDelete} disabled={selectedTests.length === 0}>Bulk Delete</button>\r\n        <button className=\"px-3 py-1 bg-green-600 text-white rounded disabled:opacity-50\" onClick={handleBulkStart} disabled={selectedTests.length === 0}>Bulk Start</button>\r\n        <span className=\"text-xs text-gray-500\">{selectedTests.length} selected</span>\r\n      </div>\r\n\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full border text-sm\" aria-label=\"All tests table\">\r\n          <thead>\r\n            <tr className=\"bg-gray-100\">\r\n              <th className=\"border px-2 py-1\">\r\n                <input type=\"checkbox\" checked={allSelected} onChange={handleSelectAll} aria-label=\"Select all tests\" />\r\n              </th>\r\n              <th className=\"border px-2 py-1\">Title</th>\r\n              <th className=\"border px-2 py-1\">Questions</th>\r\n              <th className=\"border px-2 py-1\">Category</th>\r\n              <th className=\"border px-2 py-1\">Window</th>\r\n              <th className=\"border px-2 py-1\">Active</th>\r\n              <th className=\"border px-2 py-1\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tests.length === 0 ? (\r\n              <tr>\r\n                <td colSpan={7} className=\"text-center text-gray-500 py-8\">No tests found. Please create a test in the Create Test tab.</td>\r\n              </tr>\r\n            ) : (\r\n              tests.map(test => {\r\n                const questionCount = Array.isArray(test.questions) ? test.questions.length : (test.totalQuestions || 0);\r\n                return (\r\n                  <tr key={test._id} tabIndex={0} aria-label={test.title}>\r\n                    <td className=\"border px-2 py-1 text-center\">\r\n                      <input type=\"checkbox\" checked={selectedTests.includes(test._id)} onChange={() => handleSelectTest(test._id)} aria-label={`Select test ${test.title}`} />\r\n                    </td>\r\n                    <td className=\"border px-2 py-1\">\r\n                      <div className=\"font-semibold\">{test.title}</div>\r\n                    </td>\r\n                    <td className=\"border px-2 py-1 text-center\">{questionCount}</td>\r\n                    <td className=\"border px-2 py-1\">{test.category}</td>\r\n                    <td className=\"border px-2 py-1\">\r\n                      {test.startDate && test.endDate ? (\r\n                        <span>{new Date(test.startDate).toLocaleString()} to {new Date(test.endDate).toLocaleString()}<br />\r\n                          <span className=\"text-xs text-gray-500\">Duration: {test.duration ? test.duration + ' min' : Math.round((new Date(test.endDate) - new Date(test.startDate))/60000) + ' min'}</span>\r\n                        </span>\r\n                      ) : (\r\n                        <span className=\"text-gray-400\">Not set</span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"border px-2 py-1\">{test.isActive ? 'Yes' : 'No'}</td>\r\n                   <td className=\"border px-2 py-1\">\r\n  <div className=\"flex flex-wrap gap-1 items-center\">\r\n    <button className=\"px-2 py-1 bg-yellow-500 text-white rounded text-xs\" onClick={() => openQModal(test._id)} aria-label={`Add questions to ${test.title}`}>Add</button>\r\n    <button className=\"px-2 py-1 bg-gray-500 text-white rounded text-xs\" onClick={() => openViewQModal(test)} aria-label={`View questions for ${test.title}`}>View</button>\r\n    <button className=\"px-2 py-1 bg-blue-600 text-white rounded text-xs\" onClick={() => openEditModal(test)} aria-label={`Edit settings for ${test.title}`}>Edit</button>\r\n    {test.isActive ? (\r\n      <button className=\"px-2 py-1 bg-red-600 text-white rounded text-xs\" onClick={() => {\r\n  if (window.confirm(`Are you sure you want to stop the test \"${test.title}\"?`)) handleDeactivate(test._id);\r\n      }} aria-label={`Stop test ${test.title}`}>Stop</button>\r\n    ) : (\r\n      <button className={`px-2 py-1 rounded text-xs ${questionCount === 0 ? 'bg-gray-400 text-white cursor-not-allowed' : 'bg-green-600 text-white'}`}\r\n        onClick={() => {\r\n          if (questionCount === 0) return;\r\n          if (window.confirm(`Are you sure you want to start the test \"${test.title}\"?`)) handleActivate(test._id);\r\n        }}\r\n        aria-label={`Start test ${test.title}`}\r\n        disabled={questionCount === 0}\r\n      >\r\n        Start\r\n      </button>\r\n    )}\r\n    <button className=\"px-2 py-1 bg-gray-800 text-white rounded text-xs\" onClick={() => handleDeleteTest(test._id)} aria-label={`Delete test ${test.title}`}>Delete</button>\r\n  </div>\r\n</td>\r\n                  </tr>\r\n                );\r\n              })\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Bulk Start Modal (step through each selected test) */}\r\n      {bulkStartModal.open && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\r\n            <h3 className=\"font-semibold mb-2\">Set Exam Window & Duration for Test {bulkStartModal.idx + 1} of {bulkStartQueue.length}</h3>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">Start Date & Time</label>\r\n              <input type=\"datetime-local\" className=\"input w-full\" value={bulkStartModal.start} onChange={e => setBulkStartModal(w => ({ ...w, start: e.target.value }))} />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">End Date & Time</label>\r\n              <input type=\"datetime-local\" className=\"input w-full\" value={bulkStartModal.end} onChange={e => setBulkStartModal(w => ({ ...w, end: e.target.value }))} />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">Duration (minutes)</label>\r\n              <input type=\"number\" min=\"1\" className=\"input w-full\" value={bulkStartModal.duration} onChange={e => setBulkStartModal(w => ({ ...w, duration: e.target.value }))} placeholder=\"Enter duration in minutes\" />\r\n            </div>\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded\"\r\n                onClick={handleBulkStartNext}\r\n                disabled={!bulkStartModal.start || !bulkStartModal.end || !bulkStartModal.duration || loading}\r\n              >\r\n                {bulkStartModal.idx + 1 === bulkStartQueue.length ? 'Start Last Test' : 'Start & Next'}\r\n              </button>\r\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={handleBulkStartCancel}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Edit Test Settings Modal */}\r\n      {editModal.open && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\r\n            <h3 className=\"font-semibold mb-4\">Edit Test Settings</h3>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Require All Questions to be Attempted</label>\r\n              <input type=\"checkbox\" checked={editModal.form.requireAllQuestions} onChange={e => handleEditChange('requireAllQuestions', e.target.checked)} />\r\n              <span className=\"ml-2\">ON</span>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Allow Navigation Between Questions</label>\r\n              <input type=\"checkbox\" checked={editModal.form.allowNavigation} onChange={e => handleEditChange('allowNavigation', e.target.checked)} />\r\n              <span className=\"ml-2\">ON</span>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Tab Switch Limit</label>\r\n              <input type=\"number\" min={1} max={10} value={editModal.form.tabSwitchLimit} onChange={e => handleEditChange('tabSwitchLimit', Number(e.target.value))} className=\"input w-20 ml-2\" />\r\n              <span className=\"ml-2 text-xs\">(Default: 3, 4th switch auto-submits)</span>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Device Restriction</label>\r\n              <div className=\"flex gap-2\">\r\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"mobile\" checked={editModal.form.deviceRestriction === 'mobile'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Mobile Only</label>\r\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"desktop\" checked={editModal.form.deviceRestriction === 'desktop'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Laptop/Desktop Only</label>\r\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"both\" checked={editModal.form.deviceRestriction === 'both'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Both</label>\r\n              </div>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Allowed Branches</label>\r\n              <select multiple className=\"input w-full\" value={editModal.form.allowedBranches} onChange={e => {\r\n                const values = Array.from(e.target.selectedOptions, o => o.value);\r\n                // If 'ALL' is selected, override all others\r\n                if (values.includes('__ALL__')) {\r\n                  handleEditChange('allowedBranches', ['__ALL__']);\r\n                } else {\r\n                  handleEditChange('allowedBranches', values);\r\n                }\r\n              }}>\r\n                <option value=\"__ALL__\">All Branches (Allow all students)</option>\r\n                {branchOptions.map(branch => <option key={branch} value={branch}>{branch}</option>)}\r\n              </select>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Allowed Years</label>\r\n              <select multiple className=\"input w-full\" value={editModal.form.allowedYears} onChange={e => {\r\n                const values = Array.from(e.target.selectedOptions, o => o.value);\r\n                if (values.includes('__ALL__')) {\r\n                  handleEditChange('allowedYears', ['__ALL__']);\r\n                } else {\r\n                  handleEditChange('allowedYears', values);\r\n                }\r\n              }}>\r\n                <option value=\"__ALL__\">All Years (Allow all students)</option>\r\n                {yearOptions.map(year => <option key={year} value={year}>{year}</option>)}\r\n              </select>\r\n            </div>\r\n            <div className=\"flex gap-2 mt-4\">\r\n              <button className=\"px-4 py-2 bg-blue-600 text-white rounded\" onClick={handleEditSave} disabled={loading}>Save</button>\r\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={closeEditModal}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Add Questions Modal */}\r\n      {showQModal && (\r\n        <AddQuestionsModal\r\n          closeQModal={closeQModal}\r\n          handleAddQuestions={handleAddQuestions}\r\n          loading={loading}\r\n        />\r\n      )}\r\n\r\n      {/* View Questions Modal */}\r\n      {viewQModal.open && (\r\n        <ViewQuestionsModal\r\n          questions={viewQModal.questions}\r\n          testId={viewQModal.testId}\r\n          testTitle={viewQModal.testTitle}\r\n          onClose={closeViewQModal}\r\n          fetchQuestions={openViewQModal}\r\n        />\r\n      )}\r\n\r\n      {/* Set Window Modal for Start Test */}\r\n      {windowModal.open && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\r\n            <h3 className=\"font-semibold mb-2\">Set Exam Window & Duration</h3>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">Start Date & Time</label>\r\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.start} onChange={e => setWindowModal(w => ({ ...w, start: e.target.value }))} />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">End Date & Time</label>\r\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.end} onChange={e => setWindowModal(w => ({ ...w, end: e.target.value }))} />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">Duration (minutes)</label>\r\n              <input type=\"number\" min=\"1\" className=\"input w-full\" value={windowModal.duration} onChange={e => setWindowModal(w => ({ ...w, duration: e.target.value }))} placeholder=\"Enter duration in minutes\" />\r\n            </div>\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded\"\r\n                onClick={() => doActivate(windowModal.testId, windowModal.start, windowModal.end, windowModal.duration)}\r\n                disabled={!windowModal.start || !windowModal.end || !windowModal.duration || loading}\r\n              >\r\n                Start Test\r\n              </button>\r\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={() => setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' })}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n\r\nfunction ManageTestsTable() {\r\n  const [viewQModal, setViewQModal] = useState({ open: false, questions: [], testTitle: '' });\r\n\r\n  const openViewQModal = async (test) => {\r\n    setLoading(true); setError('');\r\n    try {\r\n      const res = await api.get(`/tests/${test._id}/admin-questions`);\r\n      setViewQModal({ open: true, questions: res.data.questions || [], testTitle: test.title });\r\n    } catch (err) {\r\n      setError('Failed to fetch questions');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const closeViewQModal = () => setViewQModal({ open: false, questions: [], testTitle: '' });\r\n  const [tests, setTests] = useState([]);\r\n  const allSelected = tests.length > 0 && selectedTests.length === tests.length;\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [showQModal, setShowQModal] = useState(false);\r\n  const [currentTestId, setCurrentTestId] = useState(null);\r\n  const [branchOptions, setBranchOptions] = useState([]);\r\n  const [yearOptions, setYearOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch allowed branches/years from backend\r\n    const fetchRegistrationOptions = async () => {\r\n      try {\r\n        const res = await api.get('/meta/registration-options');\r\n        setBranchOptions(res.data.branches || []);\r\n        setYearOptions(res.data.years || []);\r\n      } catch (err) {\r\n        setBranchOptions([]);\r\n        setYearOptions([]);\r\n      }\r\n    };\r\n    fetchRegistrationOptions();\r\n  }, []);\r\n  const [editModal, setEditModal] = useState({ open: false, test: null, form: {} });\r\n  const [windowModal, setWindowModal] = useState({ open: false, testId: null, start: '', end: '', duration: '' });\r\n\r\n  // No need to fetch branches/years from users; use enums above\r\n\r\n  const fetchTests = async () => {\r\n    setLoading(true); setError('');\r\n    try {\r\n      // Fetch all tests for admin (not just active ones)\r\n      const res = await api.get('/tests?all=1');\r\n      setTests(res.data.tests || []);\r\n    } catch (err) {\r\n      setError('Failed to fetch tests');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => { fetchTests(); }, []);\r\n\r\n  const openQModal = (testId) => { setCurrentTestId(testId); setShowQModal(true); };\r\n  const closeQModal = () => { setShowQModal(false); setCurrentTestId(null); };\r\n\r\n  const openEditModal = (test) => {\r\n    setEditModal({\r\n      open: true,\r\n      test,\r\n      form: {\r\n        requireAllQuestions: test.requireAllQuestions ?? true,\r\n        allowNavigation: test.allowNavigation ?? true,\r\n        deviceRestriction: test.deviceRestriction || 'both',\r\n        allowedBranches: test.allowedBranches || [],\r\n        allowedYears: test.allowedYears || [],\r\n        tabSwitchLimit: test.tabSwitchLimit ?? 3\r\n      }\r\n    });\r\n  };\r\n  const closeEditModal = () => setEditModal({ open: false, test: null, form: {} });\r\n  const handleEditChange = (field, value) => {\r\n    setEditModal((prev) => ({ ...prev, form: { ...prev.form, [field]: value } }));\r\n  };\r\n  const handleEditSave = async () => {\r\n    setLoading(true); setError(''); setSuccess('');\r\n    if (!editModal.form.tabSwitchLimit || editModal.form.tabSwitchLimit < 1) {\r\n      setError('Tab Switch Limit must be at least 1'); setLoading(false); return;\r\n    }\r\n    if (!editModal.form.allowedBranches || editModal.form.allowedBranches.length === 0) {\r\n      setError('Select at least one allowed branch'); setLoading(false); return;\r\n    }\r\n    if (!editModal.form.allowedYears || editModal.form.allowedYears.length === 0) {\r\n      setError('Select at least one allowed year'); setLoading(false); return;\r\n    }\r\n    try {\r\n      await api.put(`/tests/${editModal.test._id}`, editModal.form);\r\n      setSuccess('Test settings updated!');\r\n      closeEditModal();\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to update test settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const doActivate = async (testId, start, end, duration) => {\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      const mins = parseInt(duration, 10);\r\n      if (!start || !end) {\r\n        setError('Please select both start and end date/time');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      if (isNaN(mins) || mins < 1) {\r\n        setError('Please enter a valid duration (minutes)');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      await api.put(`/tests/${testId}/activate`, { startDate: start, endDate: end, duration: mins });\r\n      setSuccess('Test activated!');\r\n      setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' });\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Failed to activate test');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleActivate = (testId) => {\r\n    setWindowModal({ open: true, testId, start: '', end: '', duration: '' });\r\n  };\r\n  const handleDeactivate = async (id) => {\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      await api.put(`/tests/${id}/deactivate`);\r\n      setSuccess('Test deactivated!');\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Failed to deactivate test');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleDeleteTest = async (id) => {\r\n    if (!window.confirm('Are you sure you want to delete this test? This action cannot be undone.')) return;\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      await api.delete(`/tests/${id}`);\r\n      setSuccess('Test deleted successfully!');\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Failed to delete test');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddQuestions = async (questions) => {\r\n    if (!currentTestId || !questions || questions.length === 0) return;\r\n    setLoading(true); setError(''); setSuccess('');\r\n    try {\r\n      await api.put(`/tests/${currentTestId}/questions`, { questions });\r\n      setSuccess('Questions added!');\r\n      fetchTests();\r\n    } catch (err) {\r\n      setError('Failed to add questions');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"font-semibold mb-2\">All Tests</h3>\r\n      {loading && (\r\n        <div className=\"flex items-center justify-center py-8\" role=\"status\" aria-live=\"polite\">\r\n          <svg className=\"animate-spin h-8 w-8 text-blue-600 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\r\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8v8z\" />\r\n          </svg>\r\n          <span>Loading tests...</span>\r\n        </div>\r\n      )}\r\n      {error && <div className=\"text-red-600\">{error}</div>}\r\n      {success && <div className=\"text-green-600\">{success}</div>}\r\n\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full border text-sm\" aria-label=\"All tests table\">\r\n          <thead>\r\n            <tr className=\"bg-gray-100\">\r\n              <th className=\"border px-2 py-1\">Title</th>\r\n              <th className=\"border px-2 py-1\">Questions</th>\r\n              <th className=\"border px-2 py-1\">Category</th>\r\n              <th className=\"border px-2 py-1\">Window</th>\r\n              <th className=\"border px-2 py-1\">Active</th>\r\n              <th className=\"border px-2 py-1\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tests.length === 0 ? (\r\n              <tr>\r\n                <td colSpan={6} className=\"text-center text-gray-500 py-8\">No tests found. Please create a test in the Create Test tab.</td>\r\n              </tr>\r\n            ) : (\r\n              tests.map(test => {\r\n                const questionCount = Array.isArray(test.questions) ? test.questions.length : (test.totalQuestions || 0);\r\n                return (\r\n                  <tr key={test._id} tabIndex={0} aria-label={test.title}>\r\n                    <td className=\"border px-2 py-1\">\r\n                      <div className=\"font-semibold\">{test.title}</div>\r\n                    </td>\r\n                    <td className=\"border px-2 py-1 text-center\">{questionCount}</td>\r\n                    <td className=\"border px-2 py-1\">{test.category}</td>\r\n                    <td className=\"border px-2 py-1\">\r\n                      {test.startDate && test.endDate ? (\r\n                        <span>{new Date(test.startDate).toLocaleString()} to {new Date(test.endDate).toLocaleString()}<br />\r\n                          <span className=\"text-xs text-gray-500\">Duration: {test.duration ? test.duration + ' min' : Math.round((new Date(test.endDate) - new Date(test.startDate))/60000) + ' min'}</span>\r\n                        </span>\r\n                      ) : (\r\n                        <span className=\"text-gray-400\">Not set</span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"border px-2 py-1\">{test.isActive ? 'Yes' : 'No'}</td>\r\n                   <td className=\"border px-2 py-1\">\r\n  <div className=\"flex flex-wrap gap-1 items-center\">\r\n    <button className=\"px-2 py-1 bg-yellow-500 text-white rounded text-xs\" onClick={() => openQModal(test._id)} aria-label={`Add questions to ${test.title}`}>Add</button>\r\n    <button className=\"px-2 py-1 bg-gray-500 text-white rounded text-xs\" onClick={() => openViewQModal(test)} aria-label={`View questions for ${test.title}`}>View</button>\r\n    <button className=\"px-2 py-1 bg-blue-600 text-white rounded text-xs\" onClick={() => openEditModal(test)} aria-label={`Edit settings for ${test.title}`}>Edit</button>\r\n    {test.isActive ? (\r\n      <button className=\"px-2 py-1 bg-red-600 text-white rounded text-xs\" onClick={() => {\r\n        if (window.confirm(`Are you sure you want to stop the test \"${test.title}\"?`)) handleDeactivate(test._id);\r\n      }} aria-label={`Stop test ${test.title}`}>Stop</button>\r\n    ) : (\r\n      <button className={`px-2 py-1 rounded text-xs ${questionCount === 0 ? 'bg-gray-400 text-white cursor-not-allowed' : 'bg-green-600 text-white'}`}\r\n        onClick={() => {\r\n          if (questionCount === 0) return;\r\n          if (window.confirm(`Are you sure you want to start the test \"${test.title}\"?`)) handleActivate(test._id);\r\n        }}\r\n        aria-label={`Start test ${test.title}`}\r\n        disabled={questionCount === 0}\r\n      >\r\n        Start\r\n      </button>\r\n    )}\r\n    <button className=\"px-2 py-1 bg-gray-800 text-white rounded text-xs\" onClick={() => handleDeleteTest(test._id)} aria-label={`Delete test ${test.title}`}>Delete</button>\r\n  </div>\r\n</td>\r\n                  </tr>\r\n                );\r\n              })\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Edit Test Settings Modal */}\r\n      {editModal.open && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\r\n            <h3 className=\"font-semibold mb-4\">Edit Test Settings</h3>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Require All Questions to be Attempted</label>\r\n              <input type=\"checkbox\" checked={editModal.form.requireAllQuestions} onChange={e => handleEditChange('requireAllQuestions', e.target.checked)} />\r\n              <span className=\"ml-2\">ON</span>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Allow Navigation Between Questions</label>\r\n              <input type=\"checkbox\" checked={editModal.form.allowNavigation} onChange={e => handleEditChange('allowNavigation', e.target.checked)} />\r\n              <span className=\"ml-2\">ON</span>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Tab Switch Limit</label>\r\n              <input type=\"number\" min={1} max={10} value={editModal.form.tabSwitchLimit} onChange={e => handleEditChange('tabSwitchLimit', Number(e.target.value))} className=\"input w-20 ml-2\" />\r\n              <span className=\"ml-2 text-xs\">(Default: 3, 4th switch auto-submits)</span>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Device Restriction</label>\r\n              <div className=\"flex gap-2\">\r\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"mobile\" checked={editModal.form.deviceRestriction === 'mobile'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Mobile Only</label>\r\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"desktop\" checked={editModal.form.deviceRestriction === 'desktop'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Laptop/Desktop Only</label>\r\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"both\" checked={editModal.form.deviceRestriction === 'both'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Both</label>\r\n              </div>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Allowed Branches</label>\r\n              <select multiple className=\"input w-full\" value={editModal.form.allowedBranches} onChange={e => {\r\n                const values = Array.from(e.target.selectedOptions, o => o.value);\r\n                // If 'ALL' is selected, override all others\r\n                if (values.includes('__ALL__')) {\r\n                  handleEditChange('allowedBranches', ['__ALL__']);\r\n                } else {\r\n                  handleEditChange('allowedBranches', values);\r\n                }\r\n              }}>\r\n                <option value=\"__ALL__\">All Branches (Allow all students)</option>\r\n                {branchOptions.map(branch => <option key={branch} value={branch}>{branch}</option>)}\r\n              </select>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block font-medium mb-1\">Allowed Years</label>\r\n              <select multiple className=\"input w-full\" value={editModal.form.allowedYears} onChange={e => {\r\n                const values = Array.from(e.target.selectedOptions, o => o.value);\r\n                if (values.includes('__ALL__')) {\r\n                  handleEditChange('allowedYears', ['__ALL__']);\r\n                } else {\r\n                  handleEditChange('allowedYears', values);\r\n                }\r\n              }}>\r\n                <option value=\"__ALL__\">All Years (Allow all students)</option>\r\n                {yearOptions.map(year => <option key={year} value={year}>{year}</option>)}\r\n              </select>\r\n            </div>\r\n            <div className=\"flex gap-2 mt-4\">\r\n              <button className=\"px-4 py-2 bg-blue-600 text-white rounded\" onClick={handleEditSave} disabled={loading}>Save</button>\r\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={closeEditModal}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Add Questions Modal */}\r\n      {showQModal && (\r\n        <AddQuestionsModal\r\n          closeQModal={closeQModal}\r\n          handleAddQuestions={handleAddQuestions}\r\n          loading={loading}\r\n        />\r\n      )}\r\n\r\n      {/* View Questions Modal */}\r\n      {viewQModal.open && (\r\n        <ViewQuestionsModal\r\n          questions={viewQModal.questions}\r\n          testId={viewQModal.testId}\r\n          testTitle={viewQModal.testTitle}\r\n          onClose={closeViewQModal}\r\n          fetchQuestions={openViewQModal}\r\n        />\r\n      )}\r\n\r\n      {/* Set Window Modal for Start Test */}\r\n      {windowModal.open && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\r\n            <h3 className=\"font-semibold mb-2\">Set Exam Window & Duration</h3>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">Start Date & Time</label>\r\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.start} onChange={e => setWindowModal(w => ({ ...w, start: e.target.value }))} />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">End Date & Time</label>\r\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.end} onChange={e => setWindowModal(w => ({ ...w, end: e.target.value }))} />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <label className=\"block mb-1\">Duration (minutes)</label>\r\n              <input type=\"number\" min=\"1\" className=\"input w-full\" value={windowModal.duration} onChange={e => setWindowModal(w => ({ ...w, duration: e.target.value }))} placeholder=\"Enter duration in minutes\" />\r\n            </div>\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded\"\r\n                onClick={() => doActivate(windowModal.testId, windowModal.start, windowModal.end, windowModal.duration)}\r\n                disabled={!windowModal.start || !windowModal.end || !windowModal.duration || loading}\r\n              >\r\n                Start Test\r\n              </button>\r\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={() => setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' })}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default ManageTestsTable;\r\n"],"names":["ViewQuestionsModal","_ref","questions","testId","testTitle","onClose","fetchQuestions","editIdx","setEditIdx","useState","editQ","setEditQ","saving","setSaving","msg","setMsg","cancelEdit","handleEditChange","field","value","q","_objectSpread","_jsx","className","children","_jsxs","length","map","idx","question","onChange","e","target","placeholder","option1","option2","option3","option4","correctAnswer","type","min","points","onClick","async","saveEdit","disabled","_Fragment","options","undefined","Number","startEdit","toString","AddQuestionsModal","_ref2","closeQModal","handleAddQuestions","loading","showCSV","setShowCSV","csvError","setCsvError","csvQuestions","setCsvQuestions","csvLoading","setCsvLoading","manualQuestions","setManualQuestions","currentIdx","setCurrentIdx","manualError","setManualError","handleManualChange","qs","i","style","minWidth","accept","file","files","name","endsWith","reader","FileReader","onload","event","csvText","lines","trim","split","header","h","slice","line","values","obj","forEach","parseCSV","result","err","readAsText","validQuestions","filter","removeCurrent","_","goPrev","goNext","concat","viewQModal","setViewQModal","open","selectedTests","setSelectedTests","tests","setTests","allSelected","bulkStartModal","setBulkStartModal","start","end","duration","bulkStartQueue","setBulkStartQueue","openViewQModal","setLoading","setError","res","api","get","test","_id","data","title","error","success","setSuccess","showQModal","setShowQModal","currentTestId","setCurrentTestId","branchOptions","setBranchOptions","yearOptions","setYearOptions","useEffect","branches","years","fetchRegistrationOptions","editModal","setEditModal","form","windowModal","setWindowModal","fetchTests","closeEditModal","prev","showGuide","setShowGuide","role","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","window","confirm","id","delete","handleBulkStart","checked","handleSelectAll","t","colSpan","questionCount","Array","isArray","totalQuestions","tabIndex","includes","handleSelectTest","category","startDate","endDate","Date","toLocaleString","Math","round","isActive","openQModal","_test$requireAllQuest","_test$allowNavigation","_test$tabSwitchLimit","requireAllQuestions","allowNavigation","deviceRestriction","allowedBranches","allowedYears","tabSwitchLimit","openEditModal","put","handleDeactivate","handleDeleteTest","w","mins","parseInt","isNaN","handleBulkStartCancel","max","multiple","from","selectedOptions","o","branch","year","_err$response","_err$response$data","response","message","closeViewQModal","_err$response2","_err$response2$data","backendMsg","doActivate"],"sourceRoot":""}